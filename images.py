import subprocess
import json
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
import logging
import matplotlib
matplotlib.use('Agg')  # Use the 'Agg' backend for non-blocking mode
import matplotlib.pyplot as plt
import seaborn as sns
from cycler import cycler
import io
import requests
import os


app = Flask(__name__)
CORS(app)
os.environ['REQUESTS_CA_BUNDLE'] = ''
@app.route('/execute',methods=['POST'])
def execute_code():
    json_data = request.data
    if not json_data:
        return jsonify({'error': 'No JSON data received'}), 400

    json_string = json_data.decode('utf-8')
    data = json.loads(json_string)
    code = data.get('code')
    #code = "print(2+2)\nprint('Hello, World!')"
    #code = "from matplotlib import pyplot as plt\nprint('Hello')\n# Create a simple line plot\nplt.plot([1, 2, 3], [4, 5, 1])\nplt.title('Info')\nplt.ylabel('Y axis')\nplt.xlabel('X axis')\nplt.show()"
    #code="import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.random.rand(100)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n\nax1.plot(x, y1, label='Sin(x)')\nax1.set_xlabel('X-axis')\nax1.set_ylabel('Y-axis')\nax1.set_title('Line Plot')\nax1.legend()\n\nax2.scatter(x, y2, label='Random Data', color='red', marker='o')\nax2.set_xlabel('X-axis')\nax2.set_ylabel('Y-axis')\nax2.set_title('Scatter Plot')\nax2.legend()\n\nplt.tight_layout()\n\nplt.show()"
    print(code)
    result, images = execute_code_here(code)
    
    return jsonify({'result': result, 'images': images})

def execute_code_here(code):
    try:
        global_namespace = {}
        exec(code, global_namespace)

        # Prepare a Python script to execute the provided code
        script = f'''
import sys
import json
import matplotlib.pyplot as plt
import seaborn as sns
from cycler import cycler
import io

def main():
    try:
        code = {json.dumps(code)}

        exec(code, globals(), globals())
    except Exception as e:
        print(str(e))
        sys.exit(1)

if __name__ == '__main__':
    main()
        '''
        # Execute the script and capture the output
        process = subprocess.Popen(['python3', '-c', script], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        stdout, stderr = process.communicate()
        print(stdout)
        print(capture_images())
        if process.returncode == 0:
            return stdout, capture_images()
        else:
            return stdout, []

    except Exception as e:
        logging.error(f'Error: {str(e)}')
        return str(e), []

def capture_images():
    # This function captures and returns the images generated by Matplotlib
    images = []
    for fig in plt.get_fignums():
        plt.figure(fig)
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        plt.close()
        buf.seek(0)
        images.append(buf.read())

    return images

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000)
